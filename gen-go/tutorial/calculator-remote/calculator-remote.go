// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"tutorial"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void ping()")
	fmt.Fprintln(os.Stderr, "  i64 plus(i32 num1, i32 num2)")
	fmt.Fprintln(os.Stderr, "  i32 minus(i32 num1, i32 num2)")
	fmt.Fprintln(os.Stderr, "  i64 mul(i32 num1, i32 num2)")
	fmt.Fprintln(os.Stderr, "  i32 div(i32 num1, i32 num2)")
	fmt.Fprintln(os.Stderr, "  double mod(double num1, double num2)")
	fmt.Fprintln(os.Stderr, "  i32 pow(i32 num1, i32 num2)")
	fmt.Fprintln(os.Stderr, "  i32 calculate(Work w)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := tutorial.NewCalculatorClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Ping())
		fmt.Print("\n")
		break
	case "plus":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Plus requires 2 args")
			flag.Usage()
		}
		tmp0, err18 := (strconv.Atoi(flag.Arg(1)))
		if err18 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err19 := (strconv.Atoi(flag.Arg(2)))
		if err19 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.Plus(value0, value1))
		fmt.Print("\n")
		break
	case "minus":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Minus requires 2 args")
			flag.Usage()
		}
		tmp0, err20 := (strconv.Atoi(flag.Arg(1)))
		if err20 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err21 := (strconv.Atoi(flag.Arg(2)))
		if err21 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.Minus(value0, value1))
		fmt.Print("\n")
		break
	case "mul":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Mul requires 2 args")
			flag.Usage()
		}
		tmp0, err22 := (strconv.Atoi(flag.Arg(1)))
		if err22 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err23 := (strconv.Atoi(flag.Arg(2)))
		if err23 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.Mul(value0, value1))
		fmt.Print("\n")
		break
	case "div":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Div requires 2 args")
			flag.Usage()
		}
		tmp0, err24 := (strconv.Atoi(flag.Arg(1)))
		if err24 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err25 := (strconv.Atoi(flag.Arg(2)))
		if err25 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.Div(value0, value1))
		fmt.Print("\n")
		break
	case "mod":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Mod requires 2 args")
			flag.Usage()
		}
		argvalue0, err26 := (strconv.ParseFloat(flag.Arg(1), 64))
		if err26 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err27 := (strconv.ParseFloat(flag.Arg(2), 64))
		if err27 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Mod(value0, value1))
		fmt.Print("\n")
		break
	case "pow":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Pow requires 2 args")
			flag.Usage()
		}
		tmp0, err28 := (strconv.Atoi(flag.Arg(1)))
		if err28 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err29 := (strconv.Atoi(flag.Arg(2)))
		if err29 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.Pow(value0, value1))
		fmt.Print("\n")
		break
	case "calculate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Calculate requires 1 args")
			flag.Usage()
		}
		arg30 := flag.Arg(1)
		mbTrans31 := thrift.NewTMemoryBufferLen(len(arg30))
		defer mbTrans31.Close()
		_, err32 := mbTrans31.WriteString(arg30)
		if err32 != nil {
			Usage()
			return
		}
		factory33 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt34 := factory33.GetProtocol(mbTrans31)
		argvalue0 := tutorial.NewWork()
		err35 := argvalue0.Read(jsProt34)
		if err35 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Calculate(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
